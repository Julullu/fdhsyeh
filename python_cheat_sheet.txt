# üêç Python Cheat Sheet

Rychl√° referenƒçn√≠ p≈ô√≠ruƒçka pro Python (vhodn√° pro zaƒç√°teƒçn√≠ky i pokroƒçilej≈°√≠).
Ka≈æd√° sekce obsahuje kr√°tk√© p≈ô√≠klady a koment√°≈ôe.

---

# Obsah

1. [Importy modul≈Ø](#importy-modul≈Ø)
2. [Vyƒçi≈°tƒõn√≠ termin√°lu](#vyƒçi≈°tƒõn√≠-termin√°lu)
3. [Koment√°≈ôe](#jedno≈ô√°dkov√Ω-koment√°≈ô)
   - [V√≠ce≈ô√°dkov√Ω koment√°≈ô / Docstring](#v√≠ce≈ô√°dkov√Ω-koment√°≈ô)
4. [Typy promƒõnn√Ωch](#typy-promƒõnn√Ωch)
5. [Operace se stringem](#operace-se-stringem)
   - [Slicing](#slicing)
   - [Form√°tov√°n√≠](#form√°tov√°n√≠)
     - [F-string](#1Ô∏è‚É£-modern√≠-f-string-od-python-36)
     - [.format()](#2Ô∏è‚É£-form√°tov√°n√≠-pomoc√≠-metody-format)
     - [% form√°tov√°n√≠](#3Ô∏è‚É£-star≈°√≠--formatov√°n√≠-podobn√©-jako-v-c)
     - [Zarovn√°n√≠ a ƒç√≠sla](#4Ô∏è‚É£-zarovn√°n√≠-a-form√°tov√°n√≠-ƒç√≠sel-ve-f-stringu)
6. [Z√°klady I/O](#z√°klady-print-a-input-v-pythonu)
   - [`print()`](#print)
   - [`input()`](#input)
7. [Pr√°ce s ƒçasem](#pr√°ce-s-ƒçasem)
8. [Pr√°ce s modulem random](#pr√°ce-s-modulem-random)
   - [random.choice()](#1Ô∏è‚É£-randomchoice--vybere-n√°hodn√Ω-prvek-ze-seznamu)
   - [random.seed()](#2Ô∏è‚É£-randomseed--nastav√≠-poƒç√°teƒçn√≠-hodnotu-pro-gener√°tor-n√°hodn√Ωch-ƒç√≠sel)
9. [ƒå√≠sla a oper√°tory](#ƒç√≠sla-a-oper√°tory)
10. [Podm√≠nky](#podm√≠nka)
    - [Zkr√°cen√° forma](#zkr√°cen√°-forma)
11. [Smyƒçky](#smyƒçka)
    - [For smyƒçka](#for-smyƒçka)
    - [While smyƒçka](#while-smyƒçka)
    - [For p≈ôes seznam](#pomoc√≠-listu)
12. [Funkce](#funkce)
    - [Docstring a Google styl](#üß†-co-je-docstring)
13. [List (seznam)](#list-seznam)
14. [Dictionary (slovn√≠k)](#dictionary-slovn√≠k)
15. [Tupl](#tuply)
16. [Mno≈æina](#mno≈æina)
17. [Errory (v√Ωjimky)](#errory-v√Ωjimky)
18. [Obr√°zky v Markdownu](#obr√°zky-v-markdownu)
    - [HTML a CSS verze](#pokroƒçilej≈°√≠-verze-pomoc√≠-html-a-css)


```python
python              # spust√≠ interaktivn√≠ re≈æim
python script.py    # spust√≠ skript
```
## Importy modul≈Ø
```python
Prov√°d√≠me na zaƒç√°tku programu.
import math
from os import path

print(math.sqrt(16))
print(path.exists("data.txt"))
```
## Vyƒçi≈°tƒõn√≠ termin√°lu
```python
import os

# Pro Windows
os.system('cls')

# Pro macOS a Linux
os.system('clear')
```
## Jedno≈ô√°dkov√Ω koment√°≈ô
```python
"""
V√≠ce≈ô√°dkov√Ω koment√°≈ô
nebo docstring pro funkce
"""
```
## Typy promƒõnn√Ωch

```python
x = 5               # int
y = 3.14            # float
name = "Python"     # string
is_fun = True       # boolean
```
## Operace se stringem

```python
s = "Hello World"

len(s)              # d√©lka ≈ôetƒõzce
s.lower()           # "hello world"
s.upper()           # "HELLO WORLD"
s.title()           # "Hello World"
s.strip()           # odstran√≠ mezery na okraj√≠ch
s.replace("World", "Python")
"Python" in s       # True
```
## Slicing
```python
s[0:5]              # "Hello"
s[-1]               # posledn√≠ znak -> "d"
s[1:]               # vyp√≠≈°e znak a v≈°echny za n√≠m -> "ello Python"
s[:3]               # vyp√≠≈°e znak a v≈°echny p≈ôed n√≠m -> "Hel"
```
## Form√°tov√°n√≠
```python
name = "Eva"
age = 26
```

### 1Ô∏è‚É£ Modern√≠ f-string (od Python 3.6)
```python
greeting = f"Ahoj, {name}!"                # Vlo≈æ√≠ hodnotu promƒõnn√© name
info = f"{name} m√° {age} let."            # Vlo≈æ√≠ v√≠ce promƒõnn√Ωch
print(greeting)  # Ahoj, Eva!
print(info)      # Eva m√° 26 let.

# f-string m≈Ø≈æe obsahovat i v√Ωrazy
calculation = f"10 + 5 = {10 + 5}"        # v√Ωsledek v√Ωrazu p≈ô√≠mo v ≈ôetƒõzci
print(calculation)  # 10 + 5 = 15
```
### 2Ô∏è‚É£ Form√°tov√°n√≠ pomoc√≠ metody .format()
```python
greeting2 = "Ahoj, {}!".format(name)
info2 = "{} m√° {} let.".format(name, age)
print(greeting2)  # Ahoj, Eva!
print(info2)      # Eva m√° 26 let.
```
### 3Ô∏è‚É£ Star≈°√≠ %-formatov√°n√≠ (podobn√© jako v C)
```python
greeting3 = "Ahoj, %s!" % name          # %s jako string
info3 = "%s m√° %d let." % (name, age)   # %d jako decimal integer
print(greeting3)  # Ahoj, Eva!
print(info3)      # Eva m√° 26 let.
```
### 4Ô∏è‚É£ Zarovn√°n√≠ a form√°tov√°n√≠ ƒç√≠sel ve f-stringu
```python
pi = 3.1415926535
print(f"Pi na 2 desetinn√° m√≠sta: {pi:.2f}")    # Pi na 2 desetinn√° m√≠sta: 3.14
print(f"Zarovn√°n√≠ vlevo: {name:<10}!")          # Eva       !
print(f"Zarovn√°n√≠ vpravo: {name:>10}!")         #        Eva!
print(f"Zarovn√°n√≠ na st≈ôed: {name:^10}!")       #    Eva    !
```

## Z√°klady: `print()` a `input()` v Pythonu


### `print()`

- Slou≈æ√≠ k **v√Ωpisu textu nebo hodnot na obrazovku (termin√°l).**

#### Z√°kladn√≠ pou≈æit√≠

```python
print("Ahoj svƒõte!")         # Vyp√≠≈°e text
print(5 + 3)                 # Vyp√≠≈°e v√Ωsledek v√Ωpoƒçtu: 8
```
### `input()`

- Slou≈æ√≠ k **z√≠sk√°n√≠ vstupu od u≈æivatele (ƒçek√°, dokud u≈æivatel nezad√° text a nepotvrd√≠ Enter).**
#### Z√°kladn√≠ pou≈æit√≠
```python
name = input("Zadej sv√© jm√©no: ")
print(f"Ahoj, {name}!")
age = int(input("Zadej sv≈Øj vƒõk: "))
print(f"Za rok ti bude {age + 1} let.")
```
# Pr√°ce s ƒçasem
```python
from datetime import datetime, timedelta

# Z√≠sk√°n√≠ aktu√°ln√≠ho ƒçasu
now = datetime.now()

print(now)                     # cel√Ω objekt datetime (nap≈ô. 2025-10-23 14:37:52.123456)
print(type(now))               # <class 'datetime.datetime'>

# ---- V√Ωpis jednotliv√Ωch ƒç√°st√≠ ----
print("Rok:", now.year)        # 2025
print("Mƒõs√≠c:", now.month)     # 10
print("Den:", now.day)         # 23
print("Hodina:", now.hour)     # 14
print("Minuta:", now.minute)   # 37
print("Sekunda:", now.second)  # 52
```
## Pr√°ce s modulem random
```python
import random
```
### 1Ô∏è‚É£ random.choice() ‚Äì vybere n√°hodn√Ω prvek ze seznamu
```python
colors = ["ƒçerven√°", "modr√°", "zelen√°", "≈ælut√°"]
random_color = random.choice(colors)
print("N√°hodn√° barva:", random_color)
```
### 2Ô∏è‚É£ random.seed() ‚Äì nastav√≠ poƒç√°teƒçn√≠ hodnotu pro gener√°tor n√°hodn√Ωch ƒç√≠sel
 D√≠ky tomu budou n√°hodn√° ƒç√≠sla **opakovateln√°** p≈ôi ka≈æd√©m spu≈°tƒõn√≠
```python
random.seed(42)

# Nastav√≠ poƒç√°teƒçn√≠ bod gener√°toru n√°hodn√Ωch ƒç√≠sel.

# Pokud pou≈æije≈° stejn√Ω seed, dostane≈° stejnou posloupnost n√°hodn√Ωch ƒç√≠sel.
print("N√°hodn√© ƒç√≠slo 1:", random.randint(1, 10))  # 1. ƒç√≠slo
print("N√°hodn√© ƒç√≠slo 2:", random.randint(1, 10))  # 2. ƒç√≠slo

# Dal≈°√≠ pou≈æit√≠ random.choice se seedem
random_choice_with_seed = random.choice(colors)
print("N√°hodn√° barva se seedem:", random_choice_with_seed)
```

## ƒç√≠sla a oper√°tory
```python
a, b = 10, 3

a + b     # 13
a - b     # 7
a * b     # 30
a / b     # 3.3333
a // b    # celoƒç√≠seln√© dƒõlen√≠ -> 3
a % b     # zbytek po dƒõlen√≠ -> 1
a ** b    # mocnina -> 1000
```
## Podm√≠nka
```python
x = 10
if x > 0:
    print("kladn√©")
elif x == 0:
    print("nula")
else:
    print("z√°porn√©")
```

### Zkr√°cen√° forma
```python
status = "OK" if x > 0 else "NOK"
```
## Smyƒçka
### For smyƒçka
```python
for i in range(5):      # 0‚Äì4
    print(i)

```
### While smyƒçka
```python
i = 0
while i < 3:
    print(i)
    i += 1
```
### Pomoc√≠ listu
```python
for item in ["jablko", "ban√°n"]: 
    print(item)                  # Vyp√≠≈°e itemy z listu
```
## Funkce
```python
def greet(name="svƒõte"):          # Hodnota default argumentu je "svƒõte"
    """Vr√°t√≠ pozdrav"""           # Docstring
    return f"Ahoj, {name}!"

print(greet("Pepa"))    # Zmƒõnili jsme argument na "Pepa" -- Ahoj, Pepa
```
## üß† Co je docstring?

**Docstring** (documentation string) je speci√°ln√≠ **≈ôetƒõzec v trojit√Ωch uvozovk√°ch `""" ... """`**,  
kter√Ω slou≈æ√≠ k dokumentaci funkc√≠, t≈ô√≠d, metod a modul≈Ø.

üìå Umis≈•uje se **hned za definici** funkce, t≈ô√≠dy nebo modulu ‚Äî ne jako koment√°≈ô, ale jako souƒç√°st k√≥du.

```python
def greet(name):
    """Vr√°t√≠ textov√Ω pozdrav pro zadan√© jm√©no."""
    return f"Ahoj, {name}!"
```
### Google styl
args: argumenty funkce (s ƒç√≠m funkce pracuje)

returns: co funkce vrac√≠

raises: v√Ωjimky, co m≈Ø≈æe funkce vyhodit
```python
def divide(a, b):
    """
    Vydƒõl√≠ prvn√≠ ƒç√≠slo druh√Ωm.

    Args:
        a (float): Dƒõlenec.
        b (float): Dƒõlitel.

    Returns:
        float: V√Ωsledek dƒõlen√≠.

    Raises:
        ZeroDivisionError: Pokud je dƒõlitel nulov√Ω.
    """
    if b == 0:
        raise ZeroDivisionError("Dƒõlen√≠ nulou nen√≠ povoleno.")
    return a / b
```
## List (seznam)
```python
nums = [1, 2, 3]    # vytvo≈ô√≠ seznam s prvky 1, 2 a 3
nums.append(4)      # p≈ôid√° ƒç√≠slo 4 na konec seznamu
nums.remove(2)      # odstran√≠ prvn√≠ v√Ωskyt ƒç√≠sla 2 ze seznamu
nums.sort()         # se≈ôad√≠ prvky seznamu vzestupnƒõ
len(nums)           # vr√°t√≠ poƒçet prvk≈Ø v seznamu (v tomto p≈ô√≠padƒõ 3)
```
## Dictionary (slovn√≠k)
```python
# Vytvo≈ôen√≠ slovn√≠ku s kl√≠ƒçi "name" a "age"
person = {"name": "Eva", "age": 25}

# Zmƒõna hodnoty p≈ôi≈ôazen√© ke kl√≠ƒçi "age" na 26
person["age"] = 26

# P≈ôid√°n√≠ nov√©ho p√°ru kl√≠ƒç‚Äìhodnota (nap≈ô. mƒõsto)
person["city"] = "Brno"

# P≈ô√≠stup k hodnotƒõ podle kl√≠ƒçe
print(person["name"])     # vyp√≠≈°e: Eva

# Bezpeƒçn√Ω p≈ô√≠stup pomoc√≠ .get() ‚Äì nevyvol√° chybu, pokud kl√≠ƒç neexistuje, vyp√≠≈°e se v√Ωchoz√≠ hodnota "nezn√°m√Ω"
print(person.get("email", "nezn√°m√Ω"))   # vyp√≠≈°e: nezn√°m√Ω

# Odstranƒõn√≠ p√°ru s kl√≠ƒçem "city"
person.pop("city")

# V√Ωpis v≈°ech kl√≠ƒç≈Ø ve slovn√≠ku
print(person.keys())      # dict_keys(['name', 'age'])

# V√Ωpis v≈°ech hodnot
print(person.values())    # dict_values(['Eva', 26])

# V√Ωpis v≈°ech dvojic kl√≠ƒç‚Äìhodnota
print(person.items())     # dict_items([('name', 'Eva'), ('age', 26)])

# Cyklem lze proch√°zet v≈°echny polo≈æky
for key, value in person.items():
    print(key, "=", value)

```
## Tuply
```python
# Vytvo≈ôen√≠ tuplu se t≈ôemi prvky
point = (2, 3, 5)

# P≈ô√≠stup k jednotliv√Ωm prvk≈Øm podle indexu (indexov√°n√≠ zaƒç√≠n√° od 0)
x = point[0]   # prvn√≠ prvek: 2
y = point[1]   # druh√Ω prvek: 3
z = point[2]   # t≈ôet√≠ prvek: 5
```
 Tupl je **nemƒõnn√Ω (immutable)** ‚Äì nelze mƒõnit hodnoty jednotliv√Ωch prvk≈Ø
 ```python
# point[0] = 10   # toto by vyvolalo chybu!

# D√©lka tuplu
length = len(point)  # 3

# Tupl lze proch√°zet v cyklu
for coordinate in point:
    print(coordinate)

# Tupl m≈Ø≈æe obsahovat r≈Øzn√© typy hodnot
person = ("Eva", 26, "Brno")

# P≈ô√≠stup k hodnot√°m
name = person[0]   # Eva
age = person[1]    # 26
city = person[2]   # Brno

# Tupl lze rozbalit do promƒõnn√Ωch
name, age, city = person
```

## Mno≈æina
```python
a = {1, 2, 3}
b = {3, 4, 5}
a | b   # sjednocen√≠
a & b   # pr≈Ønik
a - b   # rozd√≠l
```
## Errory (v√Ωjimky)
```python
try:
    result = 10 / 0
except ZeroDivisionError:
    print("Nelze dƒõlit nulou!")
except Exception as e:
    print("Jin√° chyba:", e)
else:
    print("Bez chyby")
finally:
    print("Toto se provede v≈ædy.")
```
üí° Shrnut√≠:

try ‚Äì pokou≈°√≠ se prov√©st riskantn√≠ k√≥d.

except ‚Äì zachyt√°v√° konkr√©tn√≠ chyby a umo≈æ≈àuje reagovat.

else ‚Äì provede se, pokud ≈æ√°dn√° chyba nenastane.

finally ‚Äì provede se v≈ædy, ide√°ln√≠ pro √∫klid (nap≈ô. zav≈ôen√≠ souboru, uvolnƒõn√≠ zdroj≈Ø).
## Obr√°zky v Markdownu
V mnoha Markdown editorech (nap≈ô. VS Code, Obsidian) m≈Ø≈æe≈° obr√°zek vlo≈æit z clipboardu jednodu≈°e pomoc√≠ Ctrl + V.
```python
![alt text](image.png)
```
![alt text](image.png)

#### Pokroƒçilej≈°√≠ verze pomoc√≠ HTML a CSS
```python
<p align="center">
  <img src="https://www.python.org/static/community_logos/python-logo.png" alt="Python logo" width="200" />
</p>
```
<p align="center">
  <img src="https://www.python.org/static/community_logos/python-logo.png" alt="Python logo" width="200" />
</p>
