import numpy as np
import matplotlib.pyplot as plt

# Derivace
def f(t, y):
    return 10 * y

# Parametry
y0 = 1
t_end = 1
h1 = 0.005


# Přesné řešení
t_exact = np.linspace(0, t_end, 400)
y_exact = np.exp(20*t_exact)

# Eulerova metoda (explicit)
def euler(f, y0, t):
    y = np.zeros(len(t))
    y[0] = y0
    for n in range(len(t)-1):
        y[n+1] = y[n] + (t[n+1]-t[n]) * f(t[n], y[n])
    return y

# Backward Euler (implicit, pro lineární rovnici explicitně)
def backward_euler(y0, t, k=20):
    y = np.zeros(len(t))
    y[0] = y0
    for n in range(len(t)-1):
        h = t[n+1]-t[n]
        y[n+1] = y[n] / (1 - h * k)  # lineární implicitní krok
    return y

# Časové body
t_h1 = np.arange(0, t_end+h1, h1)


# Výpočty
y_euler_h1 = euler(f, y0, t_h1)

y_backward = backward_euler(y0, t_h1, k=20)

# Vykreslení
plt.figure(figsize=(8,5))
plt.plot(t_exact, y_exact, color='red', label='y=e^{20t}')
plt.plot(t_h1, y_euler_h1, 'g-o', label='Euler ∆t=0,005')

plt.plot(t_h1, y_backward, 'b-o', label='Backward Euler ∆t=0,005')
plt.xlabel('t')
plt.ylabel('y(t)')
plt.title("Graf y' = 20y, y(0)=1")
plt.legend()
plt.grid(True)
plt.show()


